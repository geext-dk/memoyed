// <auto-generated />

using System;
using Memoyed.Application.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Memoyed.Application.Migrations
{
    [DbContext(typeof(CardsContext))]
    internal class CardsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Memoyed.Domain.Cards.CardBoxSets.CardBoxSet", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.HasKey("DbId")
                    .HasName("pk_card_box_sets");

                b.ToTable("card_box_sets");
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.CardBoxes.CardBox", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int?>("CardBoxSetDbId")
                    .HasColumnName("card_box_set_db_id")
                    .HasColumnType("integer");

                b.HasKey("DbId")
                    .HasName("pk_card_boxes");

                b.HasIndex("CardBoxSetDbId")
                    .HasName("ix_card_boxes_card_box_set_db_id");

                b.ToTable("card_boxes");
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.Cards.Card", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int?>("CardBoxDbId")
                    .HasColumnName("card_box_db_id")
                    .HasColumnType("integer");

                b.HasKey("DbId")
                    .HasName("pk_cards");

                b.HasIndex("CardBoxDbId")
                    .HasName("ix_cards_card_box_db_id");

                b.ToTable("cards");
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.RevisionSessions.RevisionSession", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int>("Status")
                    .HasColumnName("status")
                    .HasColumnType("integer");

                b.HasKey("DbId")
                    .HasName("pk_revision_sessions");

                b.ToTable("revision_sessions");
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.RevisionSessions.SessionCards.SessionCard", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.Property<int?>("RevisionSessionDbId")
                    .HasColumnName("revision_session_db_id")
                    .HasColumnType("integer");

                b.Property<int>("Status")
                    .HasColumnName("status")
                    .HasColumnType("integer");

                b.HasKey("DbId")
                    .HasName("pk_session_cards");

                b.HasIndex("RevisionSessionDbId")
                    .HasName("ix_session_cards_revision_session_db_id");

                b.ToTable("session_cards");
            });

            modelBuilder.Entity("Memoyed.Domain.Users.Users.User", b =>
            {
                b.Property<int>("DbId")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("db_id")
                    .HasColumnType("integer")
                    .HasAnnotation("Npgsql:ValueGenerationStrategy",
                        NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                b.HasKey("DbId")
                    .HasName("pk_users");

                b.ToTable("users");
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.CardBoxSets.CardBoxSet", b =>
            {
                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetId", "Id", b1 =>
                {
                    b1.Property<int>("CardBoxSetDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardBoxSetDbId")
                        .HasName("pk_card_box_sets");

                    b1.ToTable("card_box_sets");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxSetDbId")
                        .HasConstraintName("fk_card_box_sets_card_box_sets_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetLanguage", "NativeLanguage", b1 =>
                {
                    b1.Property<int>("CardBoxSetDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("native_language")
                        .HasColumnType("text");

                    b1.HasKey("CardBoxSetDbId")
                        .HasName("pk_card_box_sets");

                    b1.ToTable("card_box_sets");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxSetDbId")
                        .HasConstraintName("fk_card_box_sets_card_box_sets_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetLanguage", "TargetLanguage", b1 =>
                {
                    b1.Property<int>("CardBoxSetDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("target_language")
                        .HasColumnType("text");

                    b1.HasKey("CardBoxSetDbId")
                        .HasName("pk_card_box_sets");

                    b1.ToTable("card_box_sets");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxSetDbId")
                        .HasConstraintName("fk_card_box_sets_card_box_sets_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetName", "Name", b1 =>
                {
                    b1.Property<int>("CardBoxSetDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b1.HasKey("CardBoxSetDbId")
                        .HasName("pk_card_box_sets");

                    b1.ToTable("card_box_sets");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxSetDbId")
                        .HasConstraintName("fk_card_box_set_name_card_box_sets_card_box_set_db_id");
                });

                b.OwnsMany("Memoyed.Domain.Cards.RevisionSessions.RevisionSessionId", "CompletedRevisionSessionIds",
                    b1 =>
                    {
                        b1.Property<int>("CardBoxSetDbId")
                            .HasColumnName("card_box_set_db_id")
                            .HasColumnType("integer");

                        b1.Property<int>("Id")
                            .ValueGeneratedOnAdd()
                            .HasColumnName("id")
                            .HasColumnType("integer")
                            .HasAnnotation("Npgsql:ValueGenerationStrategy",
                                NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                        b1.Property<Guid>("Value")
                            .HasColumnName("value")
                            .HasColumnType("uuid");

                        b1.HasKey("CardBoxSetDbId", "Id")
                            .HasName("pk_card_box_sets_completed_revision_session_ids");

                        b1.ToTable("card_box_sets_completed_revision_session_ids");

                        b1.WithOwner()
                            .HasForeignKey("CardBoxSetDbId")
                            .HasConstraintName("fk_card_box_sets_completed_revision_session_ids_card_box_sets_");
                    });

                b.OwnsOne("Memoyed.Domain.Cards.RevisionSessions.RevisionSessionId", "CurrentRevisionSessionId", b1 =>
                {
                    b1.Property<int>("CardBoxSetDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("current_revision_session_id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardBoxSetDbId")
                        .HasName("pk_card_box_sets");

                    b1.ToTable("card_box_sets");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxSetDbId")
                        .HasConstraintName("fk_card_box_sets_card_box_sets_db_id");
                });
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.CardBoxes.CardBox", b =>
            {
                b.HasOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSet", null)
                    .WithMany("CardBoxes")
                    .HasForeignKey("CardBoxSetDbId")
                    .HasConstraintName("fk_card_boxes_card_box_sets_card_box_set_db_id");

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetId", "SetId", b1 =>
                {
                    b1.Property<int>("CardBoxDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("set_id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardBoxDbId")
                        .HasName("pk_card_boxes");

                    b1.ToTable("card_boxes");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxDbId")
                        .HasConstraintName("fk_card_boxes_card_boxes_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxes.CardBoxId", "Id", b1 =>
                {
                    b1.Property<int>("CardBoxDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardBoxDbId")
                        .HasName("pk_card_boxes");

                    b1.ToTable("card_boxes");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxDbId")
                        .HasConstraintName("fk_card_boxes_card_boxes_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxes.CardBoxLevel", "Level", b1 =>
                {
                    b1.Property<int>("CardBoxDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<int>("Value")
                        .HasColumnName("level")
                        .HasColumnType("integer");

                    b1.HasKey("CardBoxDbId")
                        .HasName("pk_card_boxes");

                    b1.ToTable("card_boxes");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxDbId")
                        .HasConstraintName("fk_card_boxes_card_boxes_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxes.CardBoxRevisionDelay", "RevisionDelay", b1 =>
                {
                    b1.Property<int>("CardBoxDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<int>("Value")
                        .HasColumnName("revision_delay")
                        .HasColumnType("integer");

                    b1.HasKey("CardBoxDbId")
                        .HasName("pk_card_boxes");

                    b1.ToTable("card_boxes");

                    b1.WithOwner()
                        .HasForeignKey("CardBoxDbId")
                        .HasConstraintName("fk_card_boxes_card_boxes_db_id");
                });
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.Cards.Card", b =>
            {
                b.HasOne("Memoyed.Domain.Cards.CardBoxes.CardBox", null)
                    .WithMany("Cards")
                    .HasForeignKey("CardBoxDbId")
                    .HasConstraintName("fk_cards_card_boxes_card_box_db_id");

                b.OwnsOne("Memoyed.Domain.Cards.CardBoxes.CardBoxId", "CardBoxId", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("card_box_id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_cards_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardComment", "Comment", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_card_comment_cards_card_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardId", "Id", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_cards_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardWord", "NativeLanguageWord", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("native_language_word")
                        .HasColumnType("text");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_cards_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardWord", "TargetLanguageWord", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("target_language_word")
                        .HasColumnType("text");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_cards_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Shared.UtcTime", "CardBoxChangedDate", b1 =>
                {
                    b1.Property<int>("CardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<DateTime>("Value")
                        .HasColumnName("card_box_changed_date")
                        .HasColumnType("timestamp without time zone");

                    b1.HasKey("CardDbId")
                        .HasName("pk_cards");

                    b1.ToTable("cards");

                    b1.WithOwner()
                        .HasForeignKey("CardDbId")
                        .HasConstraintName("fk_utc_time_cards_card_db_id");
                });
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.RevisionSessions.RevisionSession", b =>
            {
                b.OwnsOne("Memoyed.Domain.Cards.CardBoxSets.CardBoxSetId", "CardBoxSetId", b1 =>
                {
                    b1.Property<int>("RevisionSessionDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("card_box_set_id")
                        .HasColumnType("uuid");

                    b1.HasKey("RevisionSessionDbId")
                        .HasName("pk_revision_sessions");

                    b1.ToTable("revision_sessions");

                    b1.WithOwner()
                        .HasForeignKey("RevisionSessionDbId")
                        .HasConstraintName("fk_revision_sessions_revision_sessions_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.RevisionSessions.RevisionSessionId", "Id", b1 =>
                {
                    b1.Property<int>("RevisionSessionDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b1.HasKey("RevisionSessionDbId")
                        .HasName("pk_revision_sessions");

                    b1.ToTable("revision_sessions");

                    b1.WithOwner()
                        .HasForeignKey("RevisionSessionDbId")
                        .HasConstraintName("fk_revision_sessions_revision_sessions_db_id");
                });
            });

            modelBuilder.Entity("Memoyed.Domain.Cards.RevisionSessions.SessionCards.SessionCard", b =>
            {
                b.HasOne("Memoyed.Domain.Cards.RevisionSessions.RevisionSession", null)
                    .WithMany("SessionCards")
                    .HasForeignKey("RevisionSessionDbId")
                    .HasConstraintName("fk_session_cards_revision_sessions_revision_session_db_id");

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardId", "CardId", b1 =>
                {
                    b1.Property<int>("SessionCardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("card_id")
                        .HasColumnType("uuid");

                    b1.HasKey("SessionCardDbId")
                        .HasName("pk_session_cards");

                    b1.ToTable("session_cards");

                    b1.WithOwner()
                        .HasForeignKey("SessionCardDbId")
                        .HasConstraintName("fk_session_cards_session_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardWord", "NativeLanguageWord", b1 =>
                {
                    b1.Property<int>("SessionCardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("native_language_word")
                        .HasColumnType("text");

                    b1.HasKey("SessionCardDbId")
                        .HasName("pk_session_cards");

                    b1.ToTable("session_cards");

                    b1.WithOwner()
                        .HasForeignKey("SessionCardDbId")
                        .HasConstraintName("fk_session_cards_session_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.Cards.CardWord", "TargetLanguageWord", b1 =>
                {
                    b1.Property<int>("SessionCardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("target_language_word")
                        .HasColumnType("text");

                    b1.HasKey("SessionCardDbId")
                        .HasName("pk_session_cards");

                    b1.ToTable("session_cards");

                    b1.WithOwner()
                        .HasForeignKey("SessionCardDbId")
                        .HasConstraintName("fk_session_cards_session_cards_db_id");
                });

                b.OwnsOne("Memoyed.Domain.Cards.RevisionSessions.RevisionSessionId", "SessionId", b1 =>
                {
                    b1.Property<int>("SessionCardDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("session_id")
                        .HasColumnType("uuid");

                    b1.HasKey("SessionCardDbId")
                        .HasName("pk_session_cards");

                    b1.ToTable("session_cards");

                    b1.WithOwner()
                        .HasForeignKey("SessionCardDbId")
                        .HasConstraintName("fk_session_cards_session_cards_db_id");
                });
            });

            modelBuilder.Entity("Memoyed.Domain.Users.Users.User", b =>
            {
                b.OwnsOne("Memoyed.Domain.Users.UserId", "Id", b1 =>
                {
                    b1.Property<int>("UserDbId")
                        .HasColumnName("db_id")
                        .HasColumnType("integer");

                    b1.Property<Guid>("Value")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b1.HasKey("UserDbId")
                        .HasName("pk_users");

                    b1.ToTable("users");

                    b1.WithOwner()
                        .HasForeignKey("UserDbId")
                        .HasConstraintName("fk_user_id_users_user_db_id");
                });
            });
#pragma warning restore 612, 618
        }
    }
}